
/*
 * MainGUI.java
 *
 * Created on Feb 27, 2011, 10:24:33 PM
 */

package jsat.guitool;

import java.awt.GridLayout;
import java.io.File;
import java.util.*;
import javax.swing.*;
import jsat.ARFFLoader;
import jsat.SimpleDataSet;
import jsat.classifiers.ClassificationDataSet;
import jsat.classifiers.Classifier;
import jsat.datatransform.PCA;
import jsat.datatransform.ZeroMeanTransform;
import jsat.distributions.*;
import jsat.graphing.*;
import jsat.linear.Vec;
import jsat.math.Function;
import jsat.math.SimpleLinearRegression;
import jsat.testing.goodnessoffit.KSTest;
import jsat.testing.onesample.TTest;
import jsat.testing.onesample.ZTest;
import jsat.utils.ProbailityMatch;

/**
 *
 * @author Edwarf Raff
 */
public class MainGUI extends javax.swing.JFrame
{
    Distribution[] distributions = new Distribution[] 
    { 
        new Normal(), new LogNormal(), new Exponential(), new ChiSquared(10), 
        new Gamma(2, 1), new FisherSendor(10, 10), new Weibull(2, 1), 
        new Uniform(0, 1)
    };
    
    SimpleDataSet data;

    /** Creates new form MainGUI */
    public MainGUI()
    {
        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (Exception e)
        {
            System.out.println("Error setting native LAF: " + e);
        }
        initComponents();
        jMenuItemHisto.setEnabled(false);
        jMenuItemQQData.setEnabled(false);
        jMenuItemQQDist.setEnabled(false);
        jMenuItemScatter.setEnabled(false);
        jMenuItemScatterMatrix.setEnabled(false);
        jMenuItemSingleVariable.setEnabled(false);
        setSize(400, 300);
    }
    
    private ClassificationDataSet getClassificationData()
    {
        if(jMenuPredictingClass.getItemCount() == 0)
            return null;
        int selected = -1;
        for(int i =0; i < jMenuPredictingClass.getItemCount(); i++)
        {
            JRadioButtonMenuItem button = (JRadioButtonMenuItem) jMenuPredictingClass.getItem(i);
            if(button.isSelected())
            {
                selected = i;
                break;
            }
        }
        
        
        return new ClassificationDataSet(data.getBackingList(), selected);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jfc = new javax.swing.JFileChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemHisto = new javax.swing.JMenuItem();
        jMenuItemScatter = new javax.swing.JMenuItem();
        jMenuItemScatterMatrix = new javax.swing.JMenuItem();
        jMenuItemQQDist = new javax.swing.JMenuItem();
        jMenuItemQQData = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenuKSSearch = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItemOneSampZ = new javax.swing.JMenuItem();
        jMenuItemOneSamT = new javax.swing.JMenuItem();
        jMenuItemSingleVariable = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemLinearRegress = new javax.swing.JMenuItem();
        jMenuClassification = new javax.swing.JMenu();
        jMenuPredictingClass = new javax.swing.JMenu();
        jMenuCVisualize = new javax.swing.JMenu();
        jMenuClassPCA = new javax.swing.JMenuItem();
        jMenuCrossValidateTest = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 1));

        jMenuFile.setText("File");

        jMenuItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemOpen.setText("Open");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemOpen);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItem1);

        jMenuBar1.add(jMenuFile);

        jMenu1.setText("View");

        jMenuItemHisto.setText("Histogram");
        jMenuItemHisto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHistoActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemHisto);

        jMenuItemScatter.setText("Scatter Plot");
        jMenuItemScatter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemScatterActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemScatter);

        jMenuItemScatterMatrix.setText("Scatter Matrix");
        jMenuItemScatterMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemScatterMatrixActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemScatterMatrix);

        jMenuItemQQDist.setText("QQ Plot Distribution");
        jMenuItemQQDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQQDistActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemQQDist);

        jMenuItemQQData.setText("QQ Plot Data");
        jMenuItemQQData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQQDataActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemQQData);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Statistics");

        jMenu4.setText("Tests");

        jMenu5.setText("Goodness of Fit");

        jMenuKSSearch.setText(" Kolmogorov Search");
        jMenuKSSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuKSSearchActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuKSSearch);

        jMenu4.add(jMenu5);

        jMenu6.setText("One Sample");

        jMenuItemOneSampZ.setText("Z-Test");
        jMenuItemOneSampZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOneSampZActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItemOneSampZ);

        jMenuItemOneSamT.setText("T-Test");
        jMenuItemOneSamT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOneSamTActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItemOneSamT);

        jMenu4.add(jMenu6);

        jMenu2.add(jMenu4);

        jMenuItemSingleVariable.setText("Single Variable");
        jMenuItemSingleVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSingleVariableActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemSingleVariable);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Regression");

        jMenuItemLinearRegress.setText("Linear");
        jMenuItemLinearRegress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLinearRegressActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemLinearRegress);

        jMenuBar1.add(jMenu3);

        jMenuClassification.setText("Classification");

        jMenuPredictingClass.setText("Predicting");
        jMenuClassification.add(jMenuPredictingClass);

        jMenuCVisualize.setText("Visualize");

        jMenuClassPCA.setText("PCA");
        jMenuClassPCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuClassPCAActionPerformed(evt);
            }
        });
        jMenuCVisualize.add(jMenuClassPCA);

        jMenuClassification.add(jMenuCVisualize);

        jMenuCrossValidateTest.setText("Cross Validate");
        jMenuCrossValidateTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCrossValidateTestActionPerformed(evt);
            }
        });
        jMenuClassification.add(jMenuCrossValidateTest);

        jMenuBar1.add(jMenuClassification);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemOpenActionPerformed
    {//GEN-HEADEREND:event_jMenuItemOpenActionPerformed
        int retVal = jfc.showOpenDialog(this);

        if(retVal == JFileChooser.APPROVE_OPTION)
        {
            File file = jfc.getSelectedFile();
            try
            {
                data = ARFFLoader.loadArffFile(file);

                VecTableModel vt = new VecTableModel(data);
                JTable jt  = new JTable(vt);
                getContentPane().removeAll();
                getContentPane().add(new JScrollPane(jt));
                //Set up option selection for the classification job
                updateMenuPreductingClassItems();
                validate();
                jMenuItemHisto.setEnabled(true);
                jMenuItemQQData.setEnabled(true);
                jMenuItemQQDist.setEnabled(true);
                jMenuItemScatter.setEnabled(true);
                jMenuItemScatterMatrix.setEnabled(true);
                jMenuItemSingleVariable.setEnabled(true);
            }
            catch (Exception ex)
            {

            }
        }
    }//GEN-LAST:event_jMenuItemOpenActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem1ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItemScatterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemScatterActionPerformed
    {//GEN-HEADEREND:event_jMenuItemScatterActionPerformed
        if(data == null || data.getNumNumericalVars() < 2)
        {
            JOptionPane.showMessageDialog(null, "You need at least 2 sets of data for a scatter plot", "Scatter Plot error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DataSetSelection dss = new DataSetSelection(null, "Select X and Y Axis", data, new String[]{"X axis", "Y axis"});
        int[] axie =  dss.getSelections();

        
        ScatterPlot sp = new ScatterPlot(data.getNumericColumn(axie[0]), data.getNumericColumn(axie[1]));

        sp.setXAxisTtile(data.getNumericName(axie[0]));
        sp.setYAxisTtile(data.getNumericName(axie[1]));

        GraphDialog gd = new GraphDialog(null, "Sactter Plot of " + data.getNumericName(axie[0]) + " & " + data.getNumericName(axie[1]), sp);

        gd.setSize(300, 300);
        gd.setVisible(true);
        

    }//GEN-LAST:event_jMenuItemScatterActionPerformed

    private void jMenuItemQQDistActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemQQDistActionPerformed
    {//GEN-HEADEREND:event_jMenuItemQQDistActionPerformed
        DataSetSelection dss = new DataSetSelection(null, "Select data to check", data, new String[]{"QQ Plot Data"});

        int[] axie =  dss.getSelections();

        //Pre set the distributions to have paramaters assuming that they match the data
        for(int i = 0; i < distributions.length; i++)
            distributions[i].setUsingData(data.getNumericColumn(axie[0]));

        DistributionSelectionDialog dsd = new DistributionSelectionDialog(null, "Select distribution to compare against", distributions);
        
        Distribution dist = dsd.getDistribution();

        QQPlotDistribution qq = new QQPlotDistribution(dist, data.getNumericColumn(axie[0]));

        qq.setYAxisTtile(data.getNumericName(axie[0]));
        GraphDialog gd = new GraphDialog(null, "QQ Plot of " +  data.getNumericName(axie[0]) , qq);


        gd.setSize(300, 300);
        gd.setVisible(true);
    }//GEN-LAST:event_jMenuItemQQDistActionPerformed

    private void jMenuItemQQDataActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemQQDataActionPerformed
    {//GEN-HEADEREND:event_jMenuItemQQDataActionPerformed
        DataSetSelection dss = new DataSetSelection(null, "Select data to check", data, new String[]{"X Axis", "Y Axis"});
        int[] axie =  dss.getSelections();

        QQPlotData qq = new QQPlotData(data.getNumericColumn(axie[1]), data.getNumericColumn(axie[0]));

        qq.setXAxisTtile(data.getNumericName(axie[0]));
        qq.setYAxisTtile(data.getNumericName(axie[1]));

        GraphDialog gd = new GraphDialog(null, "QQ Plot of " + data.getNumericName(axie[0]) + " & " + data.getNumericName(axie[1]), qq);

        gd.setSize(300, 300);
        gd.setVisible(true);
    }//GEN-LAST:event_jMenuItemQQDataActionPerformed

    private void jMenuItemSingleVariableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemSingleVariableActionPerformed
    {//GEN-HEADEREND:event_jMenuItemSingleVariableActionPerformed
        SingleVariableViewDialog svvd = new SingleVariableViewDialog(data);
        svvd.pack();
        svvd.setVisible(true);
    }//GEN-LAST:event_jMenuItemSingleVariableActionPerformed

    private void jMenuItemScatterMatrixActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemScatterMatrixActionPerformed
    {//GEN-HEADEREND:event_jMenuItemScatterMatrixActionPerformed
        ScatterplotMatrix sm = new ScatterplotMatrix(null, "Scatter Matrix", data);

        sm.setSize(600, 600);
        sm.setVisible(true);
    }//GEN-LAST:event_jMenuItemScatterMatrixActionPerformed

    private void jMenuItemHistoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemHistoActionPerformed
    {//GEN-HEADEREND:event_jMenuItemHistoActionPerformed
        DataSetSelection dss = new DataSetSelection(null, "Select data to create histogram from", data, new String[]{"Histogram Data"});
        int[] axie =  dss.getSelections();

        Histogram hh = new Histogram(data.getNumericColumn(axie[0]));

        hh.setXAxisTtile(data.getNumericName(axie[0]));

        GraphDialog gd = new GraphDialog(null, "Histogram of " + data.getNumericName(axie[0]), hh);

        gd.setSize(300, 300);
        gd.setVisible(true);
    }//GEN-LAST:event_jMenuItemHistoActionPerformed

    private void jMenuItemLinearRegressActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemLinearRegressActionPerformed
    {//GEN-HEADEREND:event_jMenuItemLinearRegressActionPerformed
        if(data.getNumNumericalVars() < 2)
        {
            JOptionPane.showMessageDialog(null, "You need at least 2 sets of data for Linear Regression", "Linear Regression error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        DataSetSelection dss = new DataSetSelection(null, "Select data to perform Linear Regression on", data, new String[]{"Y data", "X data"});
        int[] axie =  dss.getSelections();

        final double[] ab = SimpleLinearRegression.regres(data.getNumericColumn(axie[1]), data.getNumericColumn(axie[0]));
        
        Function linearFunc = new Function() {

            public double f(double... x)
            {
                return ab[0] + ab[1]*x[0];
            }

            public double f(Vec x)
            {
                return f(x.get(0));
            }
        };

        ScatterPlot sp = new ScatterPlot(data.getNumericColumn(axie[1]), data.getNumericColumn(axie[0]));

        sp.setRegressionFunction(linearFunc);
        sp.setXAxisTtile(data.getNumericName(axie[1]));
        sp.setYAxisTtile(data.getNumericName(axie[0]));

        
        GraphDialog gd = new GraphDialog(null, "y = " + ab[0] + " + " + ab[1] + 
                "x, Linear Regression of " + data.getNumericName(axie[0]) + 
                " & " + data.getNumericName(axie[1]), sp);

        gd.setSize(300, 300);
        gd.setVisible(true);


    }//GEN-LAST:event_jMenuItemLinearRegressActionPerformed

    private void jMenuKSSearchActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuKSSearchActionPerformed
    {//GEN-HEADEREND:event_jMenuKSSearchActionPerformed
        DataSetSelection dss = new DataSetSelection(null, "Select data to attempt to detect the distribution of",
                data, new String[]{"Data Set"});
        
        
        int[] axie = dss.getSelections();
        for (int i = 0; i < distributions.length; i++)
            try
            {
                distributions[i].setUsingData(data.getNumericColumn(axie[0]));
            }
            catch (RuntimeException ex)
            {
            }
        
        KSTest ks = new KSTest(data.getNumericColumn(axie[0])) ;
        List<ProbailityMatch<Distribution>> pValues = 
                new ArrayList<ProbailityMatch<Distribution>>(distributions.length);
        
        for (int i = 0; i < distributions.length; i++)
        {
            try
            {
                double p = ks.testDist(distributions[i]);
                if(p >= 0.05)
                    pValues.add(new ProbailityMatch<Distribution>(p, distributions[i]));
            }
            catch(ArithmeticException ex)
            {
                
            }
        }
        
        Collections.sort(pValues);
        Collections.reverse(pValues); 
        
        
        String[] possible = new String[pValues.size()];
        for(int i = 0; i < pValues.size(); i++)
            possible[i] = pValues.get(i).getMatch().getDescriptiveName();
        
        
        JList jl = new JList(possible);

        JFrame jf = new JFrame("Possiible Distribution matches for " + data.getNumericName(axie[0]));
        if(possible.length > 0)
        {
            JPanel jp = new JPanel(new GridLayout(1, 1));
            jp.add(new JScrollPane(jl));
            jf.setContentPane(jp);
        }
        else//No distribution match
        {
            JPanel jp = new JPanel(new GridLayout(1, 1));
            jp.add(new JLabel("No known distribution seems to match this data set"));
            jf.setContentPane(jp);
        }
        jf.setVisible(true);
        jf.pack();
        
    }//GEN-LAST:event_jMenuKSSearchActionPerformed

    private void jMenuItemOneSampZActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemOneSampZActionPerformed
    {//GEN-HEADEREND:event_jMenuItemOneSampZActionPerformed
        OneSampleTestDialog dia = new OneSampleTestDialog(new ZTest(), data);
        
        dia.setSize(300, 300);
        dia.setVisible(true);
    }//GEN-LAST:event_jMenuItemOneSampZActionPerformed

    private void jMenuItemOneSamTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemOneSamTActionPerformed
    {//GEN-HEADEREND:event_jMenuItemOneSamTActionPerformed
        OneSampleTestDialog dia = new OneSampleTestDialog(new TTest(), data);
        
        dia.setSize(300, 300);
        dia.setVisible(true);
    }//GEN-LAST:event_jMenuItemOneSamTActionPerformed

    private void jMenuClassPCAActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuClassPCAActionPerformed
    {//GEN-HEADEREND:event_jMenuClassPCAActionPerformed
        ClassificationDataSet cds = getClassificationData();
        if(cds == null)
            JOptionPane.showMessageDialog(rootPane, "This data set has no categorical attributes to use as a class",
                    "Can not perform class visualization", JOptionPane.ERROR_MESSAGE);
        else if(cds.getNumNumericalVars() < 2)
            JOptionPane.showMessageDialog(rootPane, "This data set does not have enough numerical attributes to plot",
                    "Can not perform class visualization", JOptionPane.ERROR_MESSAGE);
        else
        {
            cds.applyTransform(new ZeroMeanTransform(cds));
            cds.applyTransform(new PCA(cds, 2));
            GraphDialog dialog = new GraphDialog(null, "PCA Visualization", new CategoryPlot(cds));
            dialog.setSize(400, 400);
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_jMenuClassPCAActionPerformed

    private void jMenuCrossValidateTestActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuCrossValidateTestActionPerformed
    {//GEN-HEADEREND:event_jMenuCrossValidateTestActionPerformed
        ClassifierSelectionDialog csd = new ClassifierSelectionDialog(getClassificationData(), this);
        csd.pack();
        csd.setVisible(true);
        
        if(csd.isCanceled())
            return;
        List<Classifier> classifiers = csd.getSelectedClassifiers();
        if(classifiers.isEmpty())
            return;
        ClassifierCVEvaluation eval = new ClassifierCVEvaluation(classifiers, getClassificationData(), this, "Title", false);
        
        
    }//GEN-LAST:event_jMenuCrossValidateTestActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuCVisualize;
    private javax.swing.JMenuItem jMenuClassPCA;
    private javax.swing.JMenu jMenuClassification;
    private javax.swing.JMenuItem jMenuCrossValidateTest;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemHisto;
    private javax.swing.JMenuItem jMenuItemLinearRegress;
    private javax.swing.JMenuItem jMenuItemOneSamT;
    private javax.swing.JMenuItem jMenuItemOneSampZ;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenuItem jMenuItemQQData;
    private javax.swing.JMenuItem jMenuItemQQDist;
    private javax.swing.JMenuItem jMenuItemScatter;
    private javax.swing.JMenuItem jMenuItemScatterMatrix;
    private javax.swing.JMenuItem jMenuItemSingleVariable;
    private javax.swing.JMenuItem jMenuKSSearch;
    private javax.swing.JMenu jMenuPredictingClass;
    private javax.swing.JFileChooser jfc;
    // End of variables declaration//GEN-END:variables

    /**
     * Empties out the contents of {@link #jMenuPredictingClass} and then re populates is accordingly. 
     */
    private void updateMenuPreductingClassItems()
    {
        jMenuPredictingClass.removeAll();
        if (data.getNumCategoricalVars() > 0)
        {
            List<JRadioButtonMenuItem> classSelectionOptions = new ArrayList<JRadioButtonMenuItem>(data.getNumCategoricalVars());
            for (int i = 0; i < data.getNumCategoricalVars(); i++)
            {
                JRadioButtonMenuItem classButtonOption = new JRadioButtonMenuItem(data.getCategoryName(i));
                classButtonOption.setSelected(false);
                classSelectionOptions.add(classButtonOption);
            }

            ButtonGroup buttonGroup = new ButtonGroup();
            for (JRadioButtonMenuItem jrbmi : classSelectionOptions)
                buttonGroup.add(jrbmi);
            classSelectionOptions.get(classSelectionOptions.size() - 1).setSelected(true);

            for (JRadioButtonMenuItem jrbmi : classSelectionOptions)
                jMenuPredictingClass.add(jrbmi);
        }
    }

}
