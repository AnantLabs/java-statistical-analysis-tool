
/*
 * MainGUI.java
 *
 * Created on Feb 27, 2011, 10:24:33 PM
 */

package jsat;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import jsat.distributions.ContinousDistribution;
import jsat.distributions.Exponential;
import jsat.distributions.Normal;
import jsat.graphing.Graph2D;
import jsat.graphing.Histogram;
import jsat.graphing.QQPlotData;
import jsat.graphing.QQPlotDistribution;
import jsat.graphing.ScatterPlot;
import jsat.graphing.ScatterplotMatrix;
import jsat.linear.DenseVector;
import jsat.linear.Vec;
import jsat.math.Function;
import jsat.math.SimpleLinearRegression;

/**
 *
 * @author Edwarf Raff
 */
public class MainGUI extends javax.swing.JFrame
{
    ContinousDistribution[] distributions = new ContinousDistribution[] {new Normal(), new Exponential()};
    
    String[] titles;
    List<Vec> data;

    /** Creates new form MainGUI */
    public MainGUI()
    {
        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (Exception e)
        {
            System.out.println("Error setting native LAF: " + e);
        }
        initComponents();
        jMenuItemTest.setEnabled(false);
        jMenuItemHisto.setEnabled(false);
        jMenuItemQQData.setEnabled(false);
        jMenuItemQQDist.setEnabled(false);
        jMenuItemScatter.setEnabled(false);
        jMenuItemScatterMatrix.setEnabled(false);
        jMenuItemTest.setEnabled(false);
        jMenuItemSingleVariable.setEnabled(false);
        setSize(400, 300);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jfc = new javax.swing.JFileChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemOpen = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemTest = new javax.swing.JMenuItem();
        jMenuItemHisto = new javax.swing.JMenuItem();
        jMenuItemScatter = new javax.swing.JMenuItem();
        jMenuItemScatterMatrix = new javax.swing.JMenuItem();
        jMenuItemQQDist = new javax.swing.JMenuItem();
        jMenuItemQQData = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemSingleVariable = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemLinearRegress = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout(1, 1));

        jMenuFile.setText("File");

        jMenuItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemOpen.setText("Open");
        jMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemOpen);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItem1);

        jMenuBar1.add(jMenuFile);

        jMenu1.setText("View");

        jMenuItemTest.setText("Test");
        jMenuItemTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTestActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemTest);

        jMenuItemHisto.setText("Histogram");
        jMenuItemHisto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHistoActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemHisto);

        jMenuItemScatter.setText("Scatter Plot");
        jMenuItemScatter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemScatterActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemScatter);

        jMenuItemScatterMatrix.setText("Scatter Matrix");
        jMenuItemScatterMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemScatterMatrixActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemScatterMatrix);

        jMenuItemQQDist.setText("QQ Plot Distribution");
        jMenuItemQQDist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQQDistActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemQQDist);

        jMenuItemQQData.setText("QQ Plot Data");
        jMenuItemQQData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQQDataActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemQQData);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Statistics");

        jMenuItemSingleVariable.setText("Single Variable");
        jMenuItemSingleVariable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSingleVariableActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemSingleVariable);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Regression");

        jMenuItemLinearRegress.setText("Linear");
        jMenuItemLinearRegress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLinearRegressActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemLinearRegress);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemOpenActionPerformed
    {//GEN-HEADEREND:event_jMenuItemOpenActionPerformed
        int retVal = jfc.showOpenDialog(this);

        if(retVal == JFileChooser.APPROVE_OPTION)
        {
            File file = jfc.getSelectedFile();
            try
            {
                BufferedReader br = new BufferedReader(new FileReader(file));

                titles = br.readLine().replaceAll(" +","").split(",");
                List<ArrayList<Double>> newData = new ArrayList<ArrayList<Double>>(titles.length);
                for(int i = 0; i < titles.length; i++)
                    newData.add(new ArrayList<Double>());
                String line = null;

                while( (line = br.readLine()) != null)
                {
                    String[] tmp = line.replaceAll(" +","").split(",");
                    for(int i = 0; i < titles.length; i++)
                        newData.get(i).add(Double.parseDouble(tmp[i]));
                }

                data = new ArrayList<Vec>(titles.length);
                for(int i = 0; i < titles.length; i++)
                    data.add(new DenseVector(newData.get(i)));

                VecTableModel vt = new VecTableModel(data, titles);
                JTable jt  = new JTable(vt);
                getContentPane().removeAll();
                getContentPane().add(new JScrollPane(jt));
                validate();
                jMenuItemTest.setEnabled(true);
                jMenuItemHisto.setEnabled(true);
                jMenuItemQQData.setEnabled(true);
                jMenuItemQQDist.setEnabled(true);
                jMenuItemScatter.setEnabled(true);
                jMenuItemScatterMatrix.setEnabled(true);
                jMenuItemTest.setEnabled(true);
                jMenuItemSingleVariable.setEnabled(true);
            }
            catch (FileNotFoundException ex)
            {

            }
            catch (IOException ex)
            {

            }
        }
    }//GEN-LAST:event_jMenuItemOpenActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem1ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItemTestActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemTestActionPerformed
    {//GEN-HEADEREND:event_jMenuItemTestActionPerformed
        DataSetSelection dss = new DataSetSelection(this, "Make a Selection", titles, titles);
        int[] selectinos = dss.getSelections();
        System.out.println(Arrays.toString(selectinos));


        //JFrame jf = new JFrame("Test");
//        jf.add(new DataSetSelection(titles, titles));
//        jf.pack();
//        jf.setVisible(true);
    }//GEN-LAST:event_jMenuItemTestActionPerformed

    private void jMenuItemScatterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemScatterActionPerformed
    {//GEN-HEADEREND:event_jMenuItemScatterActionPerformed
        if(data == null || data.size() < 2)
        {
            JOptionPane.showMessageDialog(null, "You need at least 2 sets of data for a scatter plot", "Scatter Plot error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DataSetSelection dss = new DataSetSelection(null, "Select X and Y Axis", titles, new String[]{"X axis", "Y axis"});
        int[] axie =  dss.getSelections();

        ScatterPlot sp = new ScatterPlot(data.get(axie[0]), data.get(axie[1]));

        sp.setXAxisTtile(titles[axie[0]]);
        sp.setYAxisTtile(titles[axie[1]]);

        GraphDialog gd = new GraphDialog(null, "Sactter Plot of " + titles[axie[0]] + " & " + titles[axie[1]], sp);

        gd.setSize(300, 300);
        gd.setVisible(true);
        

    }//GEN-LAST:event_jMenuItemScatterActionPerformed

    private void jMenuItemQQDistActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemQQDistActionPerformed
    {//GEN-HEADEREND:event_jMenuItemQQDistActionPerformed
        DataSetSelection dss = new DataSetSelection(null, "Select data to check", titles, new String[]{"QQ Plot Data"});

        int[] axie =  dss.getSelections();

        //Pre set the distributions to have paramaters assuming that they match the data
        for(int i = 0; i < distributions.length; i++)
            distributions[i].setUsingData(data.get(axie[0]));

        DistributionSelectionDialog dsd = new DistributionSelectionDialog(null, "Select distribution to compare against", distributions);
        
        ContinousDistribution dist = dsd.getDistribution();

        QQPlotDistribution qq = new QQPlotDistribution(dist, data.get(axie[0]));

        qq.setYAxisTtile(titles[axie[0]]);
        GraphDialog gd = new GraphDialog(null, "QQ Plot of " +  titles[axie[0]] , qq);


        gd.setSize(300, 300);
        gd.setVisible(true);
    }//GEN-LAST:event_jMenuItemQQDistActionPerformed

    private void jMenuItemQQDataActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemQQDataActionPerformed
    {//GEN-HEADEREND:event_jMenuItemQQDataActionPerformed
        DataSetSelection dss = new DataSetSelection(null, "Select data to check", titles, new String[]{"X Axis", "Y Axis"});
        int[] axie =  dss.getSelections();

        QQPlotData qq = new QQPlotData(data.get(axie[0]), data.get(axie[1]));

        qq.setXAxisTtile(titles[axie[0]]);
        qq.setYAxisTtile(titles[axie[1]]);

        GraphDialog gd = new GraphDialog(null, "QQ Plot of " + titles[axie[0]] + " & " + titles[axie[1]], qq);

        gd.setSize(300, 300);
        gd.setVisible(true);
    }//GEN-LAST:event_jMenuItemQQDataActionPerformed

    private void jMenuItemSingleVariableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemSingleVariableActionPerformed
    {//GEN-HEADEREND:event_jMenuItemSingleVariableActionPerformed
        SingleVariableViewDialog svvd = new SingleVariableViewDialog(data, titles);
        svvd.pack();
        svvd.setVisible(true);
    }//GEN-LAST:event_jMenuItemSingleVariableActionPerformed

    private void jMenuItemScatterMatrixActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemScatterMatrixActionPerformed
    {//GEN-HEADEREND:event_jMenuItemScatterMatrixActionPerformed
        ScatterplotMatrix sm = new ScatterplotMatrix(null, "Scatter Matrix", data, titles);

        sm.setSize(600, 600);
        sm.setVisible(true);
    }//GEN-LAST:event_jMenuItemScatterMatrixActionPerformed

    private void jMenuItemHistoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemHistoActionPerformed
    {//GEN-HEADEREND:event_jMenuItemHistoActionPerformed
        DataSetSelection dss = new DataSetSelection(null, "Select data to create histogram from", titles, new String[]{"Histogram Data"});
        int[] axie =  dss.getSelections();

        Histogram hh = new Histogram(data.get(axie[0]));

        hh.setXAxisTtile(titles[axie[0]]);

        GraphDialog gd = new GraphDialog(null, "Histogram of " + titles[axie[0]], hh);

        gd.setSize(300, 300);
        gd.setVisible(true);
    }//GEN-LAST:event_jMenuItemHistoActionPerformed

    private void jMenuItemLinearRegressActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItemLinearRegressActionPerformed
    {//GEN-HEADEREND:event_jMenuItemLinearRegressActionPerformed
        if(data.size() < 2)
        {
            JOptionPane.showMessageDialog(null, "You need at least 2 sets of data for Linear Regression", "Linear Regression error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        DataSetSelection dss = new DataSetSelection(null, "Select data to perform Linear Regression on", titles, new String[]{"Y data", "X data"});
        int[] axie =  dss.getSelections();

        final double[] ab = SimpleLinearRegression.regres(data.get(axie[0]), data.get(axie[1]));
        
        Function linearFunc = new Function() {

            public double f(double... x)
            {
                return ab[0] + ab[1]*x[0];
            }
        };

        ScatterPlot sp = new ScatterPlot(data.get(axie[1]), data.get(axie[0]));

        sp.setRegressionFunction(linearFunc);
        sp.setXAxisTtile(titles[axie[1]]);
        sp.setYAxisTtile(titles[axie[0]]);

        
        GraphDialog gd = new GraphDialog(null, "y = " + ab[0] + " + " + ab[1] + "x, Linear Regression of " + titles[axie[0]] + " & " + titles[axie[1]], sp);

        gd.setSize(300, 300);
        gd.setVisible(true);


    }//GEN-LAST:event_jMenuItemLinearRegressActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemHisto;
    private javax.swing.JMenuItem jMenuItemLinearRegress;
    private javax.swing.JMenuItem jMenuItemOpen;
    private javax.swing.JMenuItem jMenuItemQQData;
    private javax.swing.JMenuItem jMenuItemQQDist;
    private javax.swing.JMenuItem jMenuItemScatter;
    private javax.swing.JMenuItem jMenuItemScatterMatrix;
    private javax.swing.JMenuItem jMenuItemSingleVariable;
    private javax.swing.JMenuItem jMenuItemTest;
    private javax.swing.JFileChooser jfc;
    // End of variables declaration//GEN-END:variables

}
